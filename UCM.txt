-- Creating the students table
CREATE TABLE students (
    student_id INT PRIMARY KEY IDENTITY(1,1),
    first_name NVARCHAR(50) NOT NULL,
    last_name NVARCHAR(50) NOT NULL,
    enrollment_date DATE NOT NULL
);

-- Creating the professors table
CREATE TABLE professors (
    professor_id INT PRIMARY KEY IDENTITY(1,1),
    first_name NVARCHAR(50) NOT NULL,
    last_name NVARCHAR(50) NOT NULL,
    department NVARCHAR(100) NOT NULL
);

-- Creating the courses table
CREATE TABLE courses (
    course_id INT PRIMARY KEY IDENTITY(1,1),
    course_name NVARCHAR(100) NOT NULL,
    professor_id INT,
    FOREIGN KEY (professor_id) REFERENCES professors(professor_id)
);

-- Creating the enrollments table
CREATE TABLE enrollments (
    enrollment_id INT PRIMARY KEY IDENTITY(1,1),
    student_id INT,
    course_id INT,
    grade CHAR(2),
    FOREIGN KEY (student_id) REFERENCES students(student_id),
    FOREIGN KEY (course_id) REFERENCES courses(course_id)
);


--Query to find the total number of students enrolled in each course:

SELECT c.course_id, c.course_name, COUNT(e.student_id) AS total_students
FROM courses c
LEFT JOIN enrollments e ON c.course_id = e.course_id
GROUP BY c.course_id, c.course_name;

--Query to list the courses taught by professors in the 'Computer Science' department:

SELECT c.course_id, c.course_name, p.first_name, p.last_name
FROM courses c
JOIN professors p ON c.professor_id = p.professor_id
WHERE p.department = 'Computer Science';

--Query to calculate the average grade for each course:

SELECT c.course_id, c.course_name, AVG(CASE
    WHEN e.grade = 'A' THEN 4.0
    WHEN e.grade = 'B' THEN 3.0
    WHEN e.grade = 'C' THEN 2.0
    WHEN e.grade = 'D' THEN 1.0
    WHEN e.grade = 'E' THEN 0.0
    ELSE NULL
END) AS average_grade
FROM courses c
JOIN enrollments e ON c.course_id = e.course_id
GROUP BY c.course_id, c.course_name;

--Query to find students who are enrolled in more than three courses:

SELECT s.student_id, s.first_name, s.last_name, COUNT(e.course_id) AS courses_enrolled
FROM students s
JOIN enrollments e ON s.student_id = e.student_id
GROUP BY s.student_id, s.first_name, s.last_name
HAVING COUNT(e.course_id) > 3;
